<!DOCTYPE html>
<html metal:use-macro="main_template">
  <div metal:fill-slot="main_content">
    <div class="container">

      <div class="row" style="padding-bottom: 10px;">
        <div class="col-md-12 pull-right">
          <button id="record-me">Record</button>
          <button id="stop-me" disabled>â—¼</button>
        </div>
      </div>

      <div class="row">
        <div class="col-md-4" style="padding-left: 0px; padding-right: 0px;">
          <video muted="true" autoplay>Your browser doesn't support video.</video>
        </div>

        <div class="col-md-8">
          <div id="player" style="display: none">
            <div id="karaoke-wrapper">
              <div id="karaoke-display"></div>
            </div>
          </div>
          <div id="status">0:00</div>
        </div>
      </div>
    </div>
  </div>

  <div metal:fill-slot="tail">
    <script src="${layout.static('recorder.js')}"></script>
    <script type="text/javascript" src="${layout.static('ricekaraoke.js')}"></script>
    <script type="text/javascript" src="${layout.static('simplekaraokedisplay.js')}"></script>
    <script>
      var karaoke = (function() {
        var numDisplayLines = 4; // Number of lines to do the karaoke with
        var timings = ${timings};
        var wasPaused = false;
        var show = null;
        var player = new Audio();
        player.setAttribute('src', '${mp3_url}');
        var lastPosition = 0;

        function getTimeString(t) {
          var min = Math.floor(t / 60);
          var secs = Math.floor(t % 60);
          return min + ':' + (secs < 10 ? '0' : '') + secs;
        }
         
        function changePosition(percent) {
          if (player != null) {
            var duration = player.duration;
            var position = duration * percent / 100;
            player.currentTime = position;
          }
        }

        function updateStatus() {
          var duration = player.duration;
          $('#status').text(getTimeString(player.currentTime) + ' / ' + 
                                          getTimeString(duration));
        }

        function setup() {
          $('#player').show();
        }

        function play() {
          player.play();
        }

        function pause() {
          player.pause();
        }

        function init() {
          // Create the karaoke engine and get a show instance
          var karaoke = new RiceKaraoke(RiceKaraoke.simpleTimingToTiming(timings));
          var renderer = new SimpleKaraokeDisplayEngine(
            'karaoke-display', numDisplayLines);
          show = karaoke.createShow(renderer, numDisplayLines);

          player.addEventListener(
            'error', function(e) { alert('Failed to play! ' + e) }, false);
          player.addEventListener('ended', function() { 
            // AFAICT this isn't called
            player.pause();
            rtc_recorder.stop();
          }, false);
          player.addEventListener('timeupdate', function () {
              var ct = player.currentTime;
              if (ct < lastPosition) {
                show.reset();
              }
              if (ct >= player.duration) {
                rtc_recorder.stop();
              } 
              show.render(ct, false);
              updateStatus();
              lastPosition = ct;
            }, false);


          };

          init();
          setup();

          return {
            play: play,
          }
      })();

      var rtc_recorder = (function(exports) {
        exports.URL = exports.URL || exports.webkitURL;

        exports.requestAnimationFrame = exports.requestAnimationFrame ||
            exports.webkitRequestAnimationFrame || 
            exports.mozRequestAnimationFrame ||
            exports.msRequestAnimationFrame || 
            exports.oRequestAnimationFrame;

        exports.cancelAnimationFrame = exports.cancelAnimationFrame ||
            exports.webkitCancelAnimationFrame || 
            exports.mozCancelAnimationFrame ||
            exports.msCancelAnimationFrame || 
            exports.oCancelAnimationFrame;

        navigator.getUserMedia = navigator.getUserMedia ||
            navigator.webkitGetUserMedia || 
            navigator.mozGetUserMedia ||
            navigator.msGetUserMedia;

        window.AudioContext = window.AudioContext || window.webkitAudioContext;
        navigator.getUserMedia = navigator.getUserMedia || 
            navigator.webkitGetUserMedia;
        window.URL = window.URL || window.webkitURL;

        var CANVAS_WIDTH = 320;
        var CANVAS_HEIGHT = 240;
        var video = $('video')[0];
        video.width = CANVAS_WIDTH;
        video.height = CANVAS_HEIGHT;
        var canvas = document.createElement('canvas'); // offscreen canvas.
        canvas.width = CANVAS_WIDTH;
        canvas.height = CANVAS_HEIGHT;
        var rafId = null;
        var startTime = null;
        var endTime = null;
        var audio_context;
        var recorder;
        var theStream;
        var tagTime = Date.now();
        var recording_id = "${id}";
        var recording = false;
        var framerate = 1;
        var video_frames; 

        function toggleActivateRecordButton() {
          var b = $('#record-me')[0];
          b.textContent = b.disabled ? 'Record' : 'Recording...';
          b.classList.toggle('recording');
          b.disabled = !b.disabled;
        }

        function turnOnCamera() {
          video.controls = false;

          // audio setup
          audio_context = new AudioContext;
          try {
            console.log('Audio context set up.');
            console.log(
              'navigator.getUserMedia ' + 
              (navigator.getUserMedia ? 'available.' : 'not present!'));
          } catch (e) {
            console.log('No web audio support in this browser!');
          }

          var finishVideoSetup_ = function() {
            // Note: video.onloadedmetadata doesn't fire in Chrome when using 
            // getUserMedia so we have to use setTimeout. See crbug.com/110938.
            setTimeout(function() {
              video.width = 320;//video.clientWidth;
              video.height = 240;// video.clientHeight;
              // Canvas is 1/2 for performance. Otherwise, getImageData() readback is
              // awful 100ms+ as 640x480.
              canvas.width = video.width;
              canvas.height = video.height;
            }, 1000);
          };

          navigator.webkitGetUserMedia(
            {"video": {
               "mandatory": {
                 "minWidth": "320",
                 "minHeight": "240",
                 "minFrameRate": "10",
                 "maxWidth": "320",
                 "maxHeight": "240",
                 "maxFrameRate": "10"}
             },
             audio: true}, 
             function(stream) {
               theStream = stream;
               video.src = window.URL.createObjectURL(stream);

               var input = audio_context.createMediaStreamSource(stream);

               modulatorInput = audio_context.createGainNode();

               modulatorGain = audio_context.createGainNode();
               modulatorGain.gain.value = 4.0;
               modulatorGain.connect( modulatorInput );

               input.connect(modulatorGain);
               recorder = new Recorder(input);

               finishVideoSetup_();},
             function(e) {
               alert('something went wrong');
             });
        };

        function record() {
          if (recorder === undefined) { return; }
          var elapsedTime = $('#elasped-time')[0];
          var ctx = canvas.getContext('2d');
          var CANVAS_HEIGHT = canvas.height;
          var CANVAS_WIDTH = canvas.width;

          karaoke.play();
          recording = true;
          startTime = Date.now();

          toggleActivateRecordButton();
          $('#stop-me')[0].disabled = false;

          recorder.record(); 
          video_frames = [];
          function captureFrame() {
            if (recording) {
              window.setTimeout(captureFrame, 1000 / framerate);
            }

            ctx.drawImage(video, 0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);
            video_frames.push(canvas.toDataURL('image/png'));
          };
          captureFrame();
        };

        function stop() {
          if (recorder === undefined) { return; }
          theStream.stop();
          recorder.stop();
          endTime = Date.now();
          recording = false;
          $('#stop-me')[0].disabled = true;

          toggleActivateRecordButton();

          console.log('frames captured: ' + video_frames.length + ' => ' +
                      (video_frames.length / framerate) + 's video');

          embedVideoPreview();
        };

        function embedVideoPreview(opt_url) {
          var audioDeferred = jQuery.Deferred();

          recorder.exportWAV(function(blob) {
            var fd = new FormData();
            fd.append('id', recording_id);
            fd.append('data', blob);
            fd.append('filename', "audio.wav");
            jQuery.ajax({
              type: 'POST',
              url: window.location,
              data: fd,
              processData: false,
              contentType: false
            }).done(function(data) {
              audioDeferred.resolve();
              console.log(data);
            });
          });

          var fd = new FormData();
          fd.append('id', recording_id);
          for (var i in video_frames) {
            fd.append('framedata', video_frames[i]);
          }
          
          var videoDeferred = jQuery.ajax({
            type: 'POST',
            url: window.location,
            data: fd,
            processData: false,
            contentType: false
          }).done(function(data) {
               console.log(data);
          });
          jQuery.when(audioDeferred, videoDeferred).then(function(a1, a2) {
            var fd = new FormData();
            fd.append('id', recording_id);
            fd.append('finished', '1');
            jQuery.ajax({
              type: 'POST',
              url: window.location,
              data: fd,
              processData: false,
              contentType: false
            }).done(function(data) {
              window.location = data;
            });
          });
        }

        function initEvents() {
          $('#record-me')[0].addEventListener('click', record);
          $('#stop-me')[0].addEventListener('click', function () { document.location = document.location });
        }

        initEvents();
        turnOnCamera();

        return {
          stop: stop
        }
      })(window);
    </script>
  </div>
</html>
